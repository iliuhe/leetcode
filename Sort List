# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def sortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head or not head.next:
            return head
        fast,slow=head.next,head
        while fast and fast.next:
            fast,slow=fast.next.next,slow.next
        second=slow.next
        slow.next=None
        l=self.sortList(head)
        r=self.sortList(second)
        return self.merge(l,r)
    def merge(self,l,r):
        if not l or not r:
            return l or r
        if l.val>r.val:
            l,r=r,l
        head=now=l
        l=l.next
        while l and r:
            if l.val<r.val:
                now.next=l
                l=l.next
            else:
                now.next=r
                r=r.next
            now=now.next
        now.next=l or r
        return head
            
