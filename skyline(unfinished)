class Solution:
    # @param {integer[][]} buildings
    # @return {integer[][]}
    def getSkyline(self,buildings):
        if len(buildings)==0:
            return []
        if len(buildings)==1:
            return [[buildings[0][0],buildings[0][2]],[buildings[0][1],0]]
        result=[]
        i=1
        #l_edge=buildings[0][0]
        r_edge=buildings[0][1]
        start_idx=0
        while i<len(buildings):
            if buildings[i][0]>r_edge:#split adjacent buildings
                # select points from start_idx to i-1
                result.extend(select_points(buildings[start_idx:i]))
                #after finish
                #l_edge=buildings[i][0]
                start_idx=i
            else:
                r_edge=buildings[i][1]
            if i==len(buildings)-1:
                result.extend(select_points(buildings[start_idx:i+1]))
            i+=1
        #result need sort
        return result
def select_points(a):
    #print 'select_points'
    #print a
    b=a
    if len(a)==1:
        return [[a[0][0],a[0][2]],[a[0][1],0]]
    result=[]
    i=1
    a=sorted(a,key=lambda i:i[2],reverse=True)
    #print a
    result.append([a[0][0],a[0][2]])
    width=[a[0][0],a[0][1]]
    while i<len(a):
        #print i
        result_h=[j[1] for j in result]
        if a[i][0]<=width[0] and a[i][1]<=width[1]:
            if a[i][2] in result_h:
                if result[result_h.index(a[i][2])][0]>a[i][0]:
                    result.append([a[i][0],a[i][2]])
                    width[0]=a[i][0]
            else:
                result.append([a[i][0],a[i][2]])
                width[0]=a[i][0]        
        elif a[i][0]<width[0] and a[i][1]>width[1]:
            if a[i][2] in result_h:
                if result[result_h.index(a[i][2])][0]>a[i][0]:
                    result.append([a[i][0],a[i][2]])
                    width[0]=a[i][0]
                if result[result_h.index(a[i][2])][0]>width[1]:
                    result.append([width[1],a[i][2]])
                    width[1]=a[i][1]
            else:
                result.append([a[i][0],a[i][2]])
                width[0]=a[i][0]        
                result.append([width[1],a[i][2]])
                width[1]=a[i][1]
        elif a[i][0]>=width[0] and a[i][1]>=width[1]:
            #print result
            #print result_h
            #print width
            #print result[result_h.index(a[i][2])][0]
            if a[i][2] in result_h:
                if result[result_h.index(a[i][2])][0]>width[1]:
                    result.append([width[1],a[i][2]])
                    width[1]=a[i][1]
            else:
                result.append([width[1],a[i][2]])
                width[1]=a[i][1]
        i+=1
        #print result 
    result.append([b[-1][1],0])
    return sorted(result,key=lambda i:i[0])
    
'''        # copied on line
from heapq import *

def getSkyline(LRH):
    skyline = []
    i, n = 0, len(LRH)
    liveHR = []
    while i < n or liveHR:
        print 'i  '+str(i)
        if not liveHR or i < n and LRH[i][0] <= -liveHR[0][1]:# new left small than old right
        # means adjacent
            print 'a'
            x = LRH[i][0]
            print 'x   '+str(x)
            while i < n and LRH[i][0] == x:#check if left same
                heappush(liveHR, (-LRH[i][2], -LRH[i][1]))
                i += 1
        else:# not connected
            print 'b'
            x = -liveHR[0][1]
            while liveHR and -liveHR[0][1] <= x:
                heappop(liveHR)
        print 'liveHR '+str(liveHR)
        height = len(liveHR) and -liveHR[0][0]
        print 'height  '+str(height)
        if not skyline or height != skyline[-1][1]:
            skyline += [x, height],
        print skyline
'''
        print ' '
    return skyline
