class Solution(object):
    # DFS
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        if not word:
            return True
        if not board:
            return False
        for i in range(len(board)):
            for j in range(len(board[0])):
                if self.helper(board,word,i,j):
                    return True
        return False
    def helper(self,board,word,i,j):
        if board[i][j]==word[0]:
            if not word[1:]:
                return True
            board[i][j]=''
            # value will be return if not found
            if i>0 and self.helper(board,word[1:],i-1,j):
                return True
            if j>0 and self.helper(board,word[1:],i,j-1):
                return True
            if i<len(board)-1 and self.helper(board,word[1:],i+1,j):
                return True
            if j<(len(board[0])-1) and self.helper(board,word[1:],i,j+1):
                return True
            # done with search, return the value back
            board[i][j]=word[0]
            return False
        else:
            return False
