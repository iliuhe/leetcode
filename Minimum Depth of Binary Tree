import sys
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    # @param {TreeNode} root
    # @return {integer}
    def minDepth(self, root):
        if not root:
            return 0
        depth=1
        waitlist=[[root,depth]]
        while waitlist:
            temp,cur_depth=waitlist.pop()
            # search by each row, once node at this row ends
            # it will be the result
            if not temp.left and not temp.right:
                # once one node get both left and right nodes None
                # it is minimum length
                return cur_depth
            if temp.left:
                waitlist.insert(0,[temp.left,cur_depth+1])
            if temp.right:
                waitlist.insert(0,[temp.right,cur_depth+1])
        '''
        use waitlist to store the unchecked nodes
        '''
        '''
    def minDepth(self, root):
        if not root:
            return 0
        waitlist=[(root,1)]
        result=sys.maxint
        while waitlist:
            p,depth=waitlist.pop()
            if not p.left and not p.right:
                result=min(result,depth)
            if p.left:
                waitlist.insert(0,(p.left,depth+1))
            if p.right:
                waitlist.insert(0,(p.right,depth+1))
        return result
    '''
    def minDepth(self,root):
        if not root:
            return 0
        else:
            if not root.left:
                return self.minDepth(root.right)+1
            elif not root.right:
                return self.minDepth(root.left)+1
            else:
                return min(self.minDepth(root.right),self.minDepth(root.left))+1
