# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    # @param {TreeNode} root
    # @param {TreeNode} p
    # @param {TreeNode} q
    # @return {TreeNode}
    def lowestCommonAncestor(self, root, p, q):
        if not root or p==root or q==root:
            return root
        # search the left sub tree for p or q
        left=self.lowestCommonAncestor(root.left,p,q)
        # search the right sub tree for p o q
        right=self.lowestCommonAncestor(root.right,p,q)
        # if one in left subtree, another in right subtree
        # then the root is lca
        if left and right:
            return root
        # other wise both p and q are in left subtree
        # or right subtree,(if both in left, right should be none, for 
        # searching to the bottom and not found) then return left or right
        return left or right
        
    def lowestCommonAncestor(self, root, p, q):
        nodeset=set([p,q])
        waitlist=[]# save left child of node
        lca=None
        depth=-1
        while root or waitlist:
            if root:
                if root in nodeset:
            # once found the first node, the lca must be itself or already in list!
                    nodeset.remove(root)
                    if depth<0:# do only once when first node found
                        lca=root
                        depth=len(waitlist)
                    if not nodeset:
                        break
            # travering from left to right
                waitlist.append(root)
                root=root.left
            else:
            # got bottom
                root=waitlist.pop()
                if depth>len(waitlist):
                    lca=root
                    depth=len(waitlist)
                root=root.right
        if nodeset:
            return None
        else:
            return lca
