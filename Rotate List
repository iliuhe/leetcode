# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if not head or not head.next or k==0:
            return head
        fast=temp=slow=head
        l=0
        while temp:
            temp=temp.next
            l+=1
        k=k%l
        if k==0:
            return head
        for i in range(k):
            fast=fast.next
        while fast and fast.next:
            fast=fast.next
            slow=slow.next
        fast.next=head
        head=slow.next
        slow.next=None
        return head
