class Solution(object):
        '''
    def findMedianSortedArrays(self, nums1, nums2):
        l=len(nums1+nums2)
        if l%2:
            return self.helper(nums1,nums2,l/2+1)
        else:
            return (self.helper(nums1,nums2,l/2)+self.helper(nums1,nums2,l/2+1))*0.5
            
    # find the k th smallest value
    def helper(self,nums1,nums2,k):
        if len(nums1)>len(nums2):
            return self.helper(nums2,nums1,k)
        if not nums1:
            return nums2[k-1]
        if k==1:
            return min(nums1[0],nums2[0])
        pa=min(k/2,len(nums1))
        pb=k-pa
        if nums1[pa-1]<=nums2[pb-1]:
            return self.helper(nums1[pa:],nums2,k-pa)
        else:
            return self.helper(nums1,nums2[pb:],k-pb)
            '''
    def findMedianSortedArrays(self, A, B):
        l=len(A)+len(B)
        return self.findKth(A,B,l//2) if l%2==1 else (self.findKth(A,B,l//2-1)+self.findKth(A,B,l//2))/2.0


    def findKth(self,A,B,k):
        if len(A)>len(B):
            A,B=B,A
        if not A:
            return B[k]
        if k==len(A)+len(B)-1:
            return max(A[-1],B[-1])
        i=len(A)//2
        j=k-i
        if A[i]>B[j]:
            #Here I assume it is O(1) to get A[:i] and B[j:]. In python, it's not but in cpp it is.
            return self.findKth(A[:i],B[j:],i)
        else:
            return self.findKth(A[i:],B[:j],j)
            
