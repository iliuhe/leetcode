# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @param head, a ListNode
    # @return a list node
    def detectCycle(self, head):
        if not head:
            return None
        if not head.next:
            return None
        if head==head.next:
            return head
        slow,fast=head,head.next
        counter=1
        while slow!=fast:
            if fast.next and fast.next.next and counter!=1:
                fast=fast.next.next
            elif fast.next and counter==1:
                fast=fast.next
            else:
                return None
            slow=slow.next
            counter+=1
        fast2,slow2=fast,head
        while slow2!=fast2:
            slow2,fast2=slow2.next,fast2.next
        return slow2
